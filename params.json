{"name":"MultiJ","tagline":"Multi-methods for Java","body":"# MultiJ #\r\nMultiJ provides multi-methods to Java.\r\n\r\n## Example ##\r\nMulti-methods are defined as methods in a Java interface with the annotation `@Module`.\r\n```java\r\n@Module\r\ninterface Example {\r\n    default int test(Object o) {\r\n        return 1;\r\n    }\r\n    default int test(String s) {\r\n        return 2;\r\n    }\r\n}\r\n```\r\nThe multi-method `test` is invoked by first creating an instance of the module and then invoking any of the `test` methods on the instance. MultiJ will select the most specific method with respect to the runtime types of the arguments.\r\n```java\r\nExample example = MultiJ.instance(Example.class);\r\nObject o = \"hello\";\r\nint x = example.test(o); // x = 2\r\n```\r\nDoing the same thing on a regular Java object would not generate the same result.\r\n```java\r\nExample example = new Example() {};\r\nObject o = \"hello\";\r\nint x = example.test(o); // x = 1\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}